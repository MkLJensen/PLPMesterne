import org.sireum.logika._

def coordinateIsWithin(x: Z, y: Z, x1b: Z, y1b: Z, x2b: Z, y2b: Z): B = {
    l"""{
        requires x >= 0
                 y >= 0
                 x <= 1000
                 y <= 1000
        ensures (x >= x1b & x <= x2b & y >= y1b & y <= y2b & result == true) |
                (!(x >= x1b & x <= x2b & y >= y1b & y <= y2b) & result == false)
    }"""

    if(x >= x1b & x <= x2b & y >= y1b & y <= y2b) {
        val r: B = true
        l"""{
            1. r == true premise
            2. x >= x1b & x <= x2b & y >= y1b & y <= y2b premise
            3. (x >= x1b & x <= x2b & y >= y1b & y <= y2b & r == true) andi 2 1
            4. (x >= x1b & x <= x2b & y >= y1b & y <= y2b & r == true) | (!(x >= x1b & x <= x2b & y >= y1b & y <= y2b) & r == false) ori1 3
        }"""
        return r
    } else {
        val r: B = false
        l"""{
            1. r == false premise
            2. !(x >= x1b & x <= x2b & y >= y1b & y <= y2b) premise
            3. (!(x >= x1b & x <= x2b & y >= y1b & y <= y2b) & r == false) andi 2 1
            4. (x >= x1b & x <= x2b & y >= y1b & y <= y2b & r == true) | (!(x >= x1b & x <= x2b & y >= y1b & y <= y2b) & r == false) ori2 3
        }"""
        return r
    }
}

val x: Z = 100
val y: Z = readInt()
val x1b: Z = readInt()
val y1b: Z = readInt()
val x2b: Z = 10
val y2b: Z = readInt()

assume(y>=0 & y <= 1000)

l"""{
    1. x == 100 premise
    2. x >= 0 algebra 1
    3. x <= 1000 algebra 1
    4. y >= 0 & y <= 1000 premise
    5. y >= 0 ande1 4
    6. y <= 1000 ande2 4
}"""

val k: B = coordinateIsWithin(x, y, x1b, y1b, x2b, y2b)

//assume(!(x >= x1b & x <= x2b & y >= y1b & y <= y2b & k == true))

l"""{
   1. (x >= x1b & x <= x2b & y >= y1b & y <= y2b & k == true) |
      (!(x >= x1b & x <= x2b & y >= y1b & y <= y2b) & k == false) premise
   2. x == 100 premise
   3. x2b == 10 premise
   4. x > x2b algebra 2 3
   5. !(x <= x2b) algebra 4
   6. !(x >= x1b & x <= x2b & y >= y1b & y <= y2b & k == true) ???
   7. {
        8. (x >= x1b & x <= x2b & y >= y1b & y <= y2b & k == true) assume
        9. ⊥ ¬e 8 6
       10. (!(x >= x1b & x <= x2b & y >= y1b & y <= y2b) & k == false) ⊥e 9
   }
   11. {
       12. (!(x >= x1b & x <= x2b & y >= y1b & y <= y2b) & k == false) assume
   }
   13. !(x >= x1b & x <= x2b & y >= y1b & y <= y2b) & k == false ∨e 1 7 11
   14. k == false ande2 13
}"""

assert(k==false)